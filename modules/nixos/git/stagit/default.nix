{
  lib,
  options,
  config,
  pkgs,
  ...
}:
{
  options.modules.git.stagit = {
    enable = lib.mkOption {
      description = "Whether to enable Stagit.";
      default = false;
      type = lib.types.bool;
    };
    output = lib.mkOption {
      description = "The directory where generated HTML files will reside.";
      default = "/opt/stagit";
      readOnly = true;
      type = lib.types.uniq lib.types.path;
    };
    baseUrl = lib.mkOption {
      description = "The base URL used to make links in the Atom feed generated by Stagit.";
      type = lib.types.uniq lib.types.str;
    };
    assets = {
      faviconPng = lib.mkOption {
        description = "The favicon.png file.";
        default = pkgs.writeText "favicon.png" "";
        type = lib.types.uniq lib.types.path;
      };
      logoPng = lib.mkOption {
        description = "The logo.png file.";
        default = pkgs.writeText "logo.png" "";
        type = lib.types.uniq lib.types.path;
      };
      styleCss = lib.mkOption {
        description = "The style.css file.";
        default = pkgs.writeText "style.css" "";
        type = lib.types.uniq lib.types.path;
      };
    };
  };

  config =
    let
      inherit (config.modules.git) stagit;
    in
    lib.mkIf (config.modules.git.enable && stagit.enable) {
      systemd = {
        services = {
          stagit-directory = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            serviceConfig = {
              User = "root";
              Group = "root";
              Type = "oneshot";
            };
            script = ''
              ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}

              ${pkgs.coreutils}/bin/chown \
                --recursive \
                git:git \
                ${stagit.output}
            '';
          };
          stagit-clean = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            serviceConfig = {
              User = "root";
              Group = "root";
              Type = "oneshot";
            };
            script = ''
              ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}

              ${pkgs.coreutils}/bin/chown \
                --recursive \
                git:git \
                ${stagit.output}
            '';
          };
          stagit = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            after = [
              "stagit-clean.service"
              "git-permissions.service"
              "stagit-directory.service"
            ];
            requires = [
              "stagit-clean.service"
              "stagit-static-assets.service"
            ];
            serviceConfig = {
              User = "git";
              Group = "git";
              Type = "oneshot";
            };
            script = ''
              ${
                (
                  config.modules.git.repositories
                  |> builtins.attrNames
                  |> builtins.map (name: ''
                    ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}/${name}
                    cd ${stagit.output}/${name}

                    ${pkgs.stagit}/bin/stagit \
                      -u ${stagit.baseUrl}/ \
                      ${config.modules.git.directory}/${name}
                  '')
                  |> builtins.concatStringsSep "\n"
                )
              }

              ${pkgs.stagit}/bin/stagit-index ${
                (
                  config.modules.git.repositories
                  |> builtins.attrNames
                  |> builtins.map (name: "${config.modules.git.directory}/${name}")
                  |> builtins.concatStringsSep " "
                )
              } > ${stagit.output}/index.html
            '';
          };
          stagit-static-assets = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            after = [
              "stagit.service"
              "stagit-directory.service"
            ];
            serviceConfig = {
              User = "git";
              Group = "git";
              Type = "oneshot";
            };
            script = ''
              ${pkgs.coreutils}/bin/ln \
                --force \
                --symbolic \
                ${stagit.assets.faviconPng} \
                ${stagit.output}/favicon.png

              ${pkgs.coreutils}/bin/ln \
                --force \
                --symbolic \
                ${stagit.assets.faviconPng} \
                ${stagit.output}/logo.png

              ${pkgs.coreutils}/bin/ln \
                --force \
                --symbolic \
                ${stagit.assets.styleCss} \
                ${stagit.output}/style.css

              ${
                (
                  config.modules.git.repositories
                  |> builtins.attrNames
                  |> builtins.map (name: ''
                    ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}/${name}

                    ${pkgs.coreutils}/bin/ln \
                      --force \
                      --symbolic \
                      ${stagit.assets.faviconPng} \
                      ${stagit.output}/${name}/favicon.png

                    ${pkgs.coreutils}/bin/ln \
                      --force \
                      --symbolic \
                      ${stagit.assets.logoPng} \
                      ${stagit.output}/${name}/logo.png

                    ${pkgs.coreutils}/bin/ln \
                      --force \
                      --symbolic \
                      ${stagit.assets.styleCss} \
                      ${stagit.output}/${name}/style.css
                  '')
                  |> builtins.concatStringsSep "\n"
                )
              }
            '';
          };
        };
        timers = {
          stagit = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            timerConfig = {
              OnActiveSec = "1min";
              OnUnitActiveSec = "1min";
            };
          };
        };
      };
    };
}
